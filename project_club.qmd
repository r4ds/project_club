---
execute:
  eval: false
  echo: true
format:
  revealjs: 
    theme: dark
    logo: images/r4dslogo_square.png
    footer: r4ds.io/proj0101
    multiplex: true
---

# <img src="images/shinyslack.svg" alt="shinyslack package logo, with the slack logo in neon" style="float: right" height="417"/> R4DS Project Club: Intro & {shinyslack}

# Club Introduction

## 📹YouTube

-   Videos will be posted to YouTube
    -   Turn video off now if you don't want to risk showing up!
    -   Ping me if your video was on and you don't want to be seen.

## 😇Code of Conduct

[**r4ds.io/conduct**](https://r4ds.io/conduct)

-   Open and welcoming environment.
-   Harassment-free experience for everyone.

**Contact:** [rfordatasci\@gmail.com](mailto:rfordatasci@gmail.com)

## 📅Schedule

-   2nd Saturday monthly
    -   Next: 2022-11-12 (November 12)
-   1 hour (or less)
-   [Sign up](https://docs.google.com/spreadsheets/d/1gGwxB6M5ACw_EKa_n5T1zW_HY296EK_Mfyi_8EhUH9s/edit?usp=sharing){target="_blank"} pinned in [`#project-general`](https://rfordatascience.slack.com/archives/C018EL49ZPS){target="_blank"}
    -   Join R4DS Slack: [r4ds.io/join](https://r4ds.io/join){target="_blank"}

## 🎯Purpose

-   Practice presenting.
-   Recruit contributors.
-   Show a thing you think is cool.
-   "None of us is as smart as all of us."

## 👩🏽‍💻Meeting Format

-   Slide deck?
-   Live coding?
-   Q&A?
-   Other?

## 👩🏽‍💻Meeting Format (today)

-   Slide deck ✅
-   Live coding ❔
-   Q&A ✅✅
-   Other ❔

## 🐣Mini-Q&A

-   Schedule?
-   Purpose?
-   Format?
-   Other thoughts?

# <img src="images/shinyslack.svg" alt="shinyslack package logo, with the slack logo in neon" style="float: right" height="480"/> {shinyslack}: Connecting Slack Teams to Shiny Apps

## 🌩️rstudio::conf(2022L) Lightning Talk

-   Recording available at [r4ds.io/rstudio2022v](https://r4ds.io/rstudio2022v){target="_blank"}
-   rstudio::conf: Using the package.
-   Today: The underlying code
    -   (but also most of what I said in that other talk).

[![](https://embed-ssl.wistia.com/deliveries/5f850b74b8640d8b1df649e28233b221feb3388d.jpg?image_play_button_size=2x&image_crop_resized=960x540&image_play_button=1&image_play_button_color=4287c7e0){fig-alt="A slide from the lightning talk with a play button." fig-align="center" width="480"}](https://www.rstudio.com/conference/2022/talks/shinyslack-connecting-slack-teams/?wvideo=r1av6rybsu)

## ⚡Overview: Purpose

![](images/sign_in.png){fig-alt="Sign in with Slack button"}

## ⚡Overview: Install

```{r}
#| code-summary: Install {shinyslack}

# install.packages("remotes")
remotes::install_github("r4ds/shinyslack", build_vignettes = TRUE)
```

➡️Does anybody know how to include pre-built vignettes on GitHub?

## ⚡Overview: Launch Shiny

```{r}
#| code-summary: Launch a shiny::shinyApp()
shiny::shinyApp(
  ui = ui,
  server = server
)
```

## ⚡Overview: Add Login

```{r}
#| code-summary: Launch a shinyslack::shiny_app()
#| code-line-numbers: "1,4,5"
shinyslack::shinyslack_app(
  ui = ui,
  server = server,
  team_id = "A1BC2DEFG",
  site_url = "yours.shinyapps.io/app/" #25
)
```

::: aside
[#25](https://github.com/r4ds/shinyslack/issues/25){target="_blank"}
:::

## ⚡Overview: A Demo App

```{r}
#| code-summary: A demo app
#| code-line-numbers: "1-3|5-19|21-26"

ui <- scenes::add_cookie_javascript(
  shiny::fluidPage(shiny::textOutput("user_name"))
)

server <- function(input, output, session) {
  is_logged_in <- check_login(
    input = input,
    team_id = "T6UC1DKJQ"
  )

  username <- user_info(
    components = "user_name"
  )

  output$user_name <- shiny::renderText({
    shiny::req(is_logged_in())
    username()
  })
}

shinyslack_app(
  ui = ui,
  server = server,
  team_id = "T6UC1DKJQ",
  site_url = "https://r4dscommunity.shinyapps.io/shinyslack/" #25
)
```

::: aside
[r4ds.io/shinyslack](https://r4dscommunity.shinyapps.io/shinyslack/){target="_blank"}
:::

## 🔎How? uis can be functions?!

-   [{golem}](https://github.com/ThinkR-open/golem) implements uis as functions.
-   F2 through functions for exploration!

## 🔎How? uis can be functions?

```{r}
#| code-summary: type a function in the console to start exploring
shiny::shinyApp()
```

## 🔎How? uis can be functions?

```{r}
#| code-summary: exploring shiny::shinyApp()
#| code-line-numbers: "1-21|8"
function (ui, server, onStart = NULL, options = list(), uiPattern = "/", 
  enableBookmarking = NULL) 
{
  if (!is.function(server)) {
    stop("`server` must be a function", call. = FALSE)
  }
  uiPattern <- sprintf("^%s$", uiPattern)
  httpHandler <- uiHttpHandler(ui, uiPattern)
  serverFuncSource <- function() {
    server
  }
  if (!is.null(enableBookmarking)) {
    bookmarkStore <- match.arg(enableBookmarking, c("url", 
      "server", "disable"))
    enableBookmarking(bookmarkStore)
  }
  appOptions <- captureAppOptions()
  structure(list(httpHandler = httpHandler, serverFuncSource = serverFuncSource, 
    onStart = onStart, options = options, appOptions = appOptions), 
    class = "shiny.appobj")
}
```

## 🔎How? uis can be functions?

```{r}
#| code-summary: exploring shiny:::uiHttpHandler()
#| code-line-numbers: "1-55|30-37"
function (ui, uiPattern = "^/$") 
{
  force(ui)
  allowed_methods <- "GET"
  if (is.function(ui)) {
    allowed_methods <- attr(ui, "http_methods_supported", 
      exact = TRUE) %||% allowed_methods
  }
  function(req) {
    if (!isTRUE(req$REQUEST_METHOD %in% allowed_methods)) 
      return(NULL)
    if (!isTRUE(grepl(uiPattern, req$PATH_INFO))) 
      return(NULL)
    showcaseMode <- .globals$showcaseDefault
    if (.globals$showcaseOverride) {
      mode <- showcaseModeOfReq(req)
      if (!is.null(mode)) 
        showcaseMode <- mode
    }
    testMode <- getShinyOption("testmode", default = FALSE)
    bookmarkStore <- getShinyOption("bookmarkStore", default = "disable")
    if (bookmarkStore == "disable") {
      restoreContext <- RestoreContext$new()
    }
    else {
      restoreContext <- RestoreContext$new(req$QUERY_STRING)
    }
    withRestoreContext(restoreContext, {
      uiValue <- NULL
      if (is.function(ui)) {
        if (length(formals(ui)) > 0) {
          uiValue <- ..stacktraceon..(ui(req))
        }
        else {
          uiValue <- ..stacktraceon..(ui())
        }
      }
      else {
        if (getCurrentRestoreContext()$active) {
          warning("Trying to restore saved app state, but UI code must be a function for this to work! See ?enableBookmarking")
        }
        uiValue <- ui
      }
    })
    if (is.null(uiValue)) 
      return(NULL)
    if (inherits(uiValue, "httpResponse")) {
      return(uiValue)
    }
    else {
      html <- renderPage(uiValue, showcaseMode, testMode)
      return(httpResponse(200, content = html))
    }
  }
}
```

## 🔎How? shinyslack_app()

```{r}
#| code-summary: shinyslack_app() code
#| code-line-numbers: "1-3|5-7|9-11|12-17|18-21|21|23-36"

#' Launch a Shiny App with a Slack Login
#' 
#' Launch a [shiny::shinyApp()] with an integrated Slack login.
#'
#' @inheritParams slack_shiny_ui
#' @inheritParams shiny::shinyApp
#' @param ... Additional parameters passed on to [shiny::shinyApp()].
#'
#' @return An object that represents the app. See [shiny::shinyApp()] for
#'   details.
#' @export
shinyslack_app <- function(ui,
                           server,
                           team_id,
                           site_url = NULL, #25
                           expiration = 90,
                           ...) {
  # Boring stuff for interactive() vs deployed.
  dots <- rlang::list2(...)
  parsed <- .parse_app_args(dots$options, site_url) #25
  dots$options <- NULL

  return(
    rlang::exec(
      shiny::shinyApp,
      ui = slack_shiny_ui(
        ui = ui,
        team_id = team_id,
        site_url = parsed$site_url, #25
        expiration = expiration
      ),
      server = server,
      options = parsed$options,
      !!!dots
    )
  )
}
```

::: aside
[#25](https://github.com/r4ds/shinyslack/issues/25){target="_blank"}
:::

## 🔎How? slack_shiny_ui()

```{r}
#| code-summary: slack_shiny_ui() code
#| code-line-numbers: "1-5|7-8|10-13|14-22|24|26-35|37-44|46-52|37-44"

#' Require Slack login to a Shiny app
#'
#' This is a function factory that wraps a Shiny ui. If the user does not have a
#' cookie for that site, they are prompted to login. Once they have a cookie,
#' the UI displays as normal. #5
#'
#' @inheritParams .shared-parameters
#' @inheritParams .parse_auth_code
#'
#' @return A function defining the UI of a Shiny app (either with login or
#'   without).
#' @export
slack_shiny_ui <- function(ui, team_id, site_url, expiration = 90) {
  # Case 1: They already have a cookie token.
  has_cookie_token <- scenes::set_scene(
    ui = ui,
    scenes::req_has_cookie(
      cookie_name = .slack_token_cookie_name(team_id),
      validation_fn = .validate_cookie_token,
      team_id = team_id
    )
  )

  # Case1b: No cookies. #5

  # Case 2: They are returning from the oauth endpoint, which has granted them
  # an authorization code.
  has_oauth_code <- scenes::set_scene(
    ui = .parse_auth_code(
      site_url = site_url, #25
      team_id = team_id,
      expiration = expiration
    ),
    scenes::req_has_query(key = "code")
  )

  # Case 3 (default): They have neither a token nor a code to exchange for a
  # token.
  needs_login <- scenes::set_scene(
    ui = .do_login(
      site_url = site_url, #25
      team_id = team_id
    )
  )

  return(
    scenes::change_scene(
      has_cookie_token,
      has_oauth_code,
      needs_login
    )
  )
}
```

::: aside
[#5](https://github.com/r4ds/shinyslack/issues/5){target="_blank"} [#25](https://github.com/r4ds/shinyslack/issues/25){target="_blank"}
:::

## 🖼️UIs: .do_login()

```{r}
#| code-summary: .parse_auth_code() code
#| code-line-numbers: "1-8|9-12|13-17|18-30"

#' Perform the Login Via Slack
#'
#' @inheritParams .shared-parameters
#'
#' @return A ui function that takes a request and returns a [shiny::tagList()]
#'   that sends the user to the proper Slack api URL in order to authenticate.
#' @keywords internal
.do_login <- function(site_url, team_id) {
  force(site_url) #25
  force(team_id)
  return(
    function(request) {
      auth_url <- slackteams::auth_url(
        scopes = slackteams::load_scopes(which = "slackverse"), #17
        redirect_uri = .update_site_url(site_url, request), #25
        team_code = team_id #18
      )
      return(
        shiny::tagList( #15
          shiny::p(
            "Login via Slack to access this site."
          ),
          shiny::a(
            href = auth_url,
            style = .slack_button_style,
            shiny::HTML(.slack_logo_svg),
            "Sign in with Slack"
          ) #5
        )
      )
    }
  )
}
```

::: aside
[#5](https://github.com/r4ds/shinyslack/issues/5){target="_blank"} [#15](https://github.com/r4ds/shinyslack/issues/15){target="_blank"} [#17](https://github.com/r4ds/shinyslack/issues/17){target="_blank"} [#18](https://github.com/r4ds/shinyslack/issues/18){target="_blank"} [#25](https://github.com/r4ds/shinyslack/issues/25){target="_blank"} \| [function factories](https://youtu.be/enI5Ynq6olI){target="_blank"}
:::

## 🖼️UIs: .parse_auth_code()

```{r}
#| code-summary: slack_shiny_ui() code
#| code-line-numbers: "26-35"

#' Require Slack login to a Shiny app
#'
#' This is a function factory that wraps a Shiny ui. If the user does not have a
#' cookie for that site, they are prompted to login. Once they have a cookie,
#' the UI displays as normal. #5
#'
#' @inheritParams .shared-parameters
#' @inheritParams .parse_auth_code
#'
#' @return A function defining the UI of a Shiny app (either with login or
#'   without).
#' @export
slack_shiny_ui <- function(ui, team_id, site_url, expiration = 90) {
  # Case 1: They already have a cookie token.
  has_cookie_token <- scenes::set_scene(
    ui = ui,
    scenes::req_has_cookie(
      cookie_name = .slack_token_cookie_name(team_id),
      validation_fn = .validate_cookie_token,
      team_id = team_id
    )
  )

  # Case1b: No cookies. #5

  # Case 2: They are returning from the oauth endpoint, which has granted them
  # an authorization code.
  has_oauth_code <- scenes::set_scene(
    ui = .parse_auth_code(
      site_url = site_url, #25
      team_id = team_id,
      expiration = expiration
    ),
    scenes::req_has_query(key = "code")
  )

  # Case 3 (default): They have neither a token nor a code to exchange for a
  # token.
  needs_login <- scenes::set_scene(
    ui = .do_login(
      site_url = site_url, #25
      team_id = team_id
    )
  )

  return(
    scenes::change_scene(
      has_cookie_token,
      has_oauth_code,
      needs_login
    )
  )
}
```

## 🖼️UIs: .parse_auth_code()

```{r}
#| code-summary: .parse_auth_code() code
#| code-line-numbers: "1-9|10-14|15-16|18-23|25-26|31-35|36-41"

#' Convert a Slack Authorization Code to a Token
#'
#' @inheritParams .shared-parameters
#' @inheritParams scenes::set_cookie
#'
#' @return A ui function that takes a request and returns a [shiny::tagList()]
#'   that sets the cookie then reloads the site.
#' @keywords internal
.parse_auth_code <- function(site_url, team_id, expiration) {
  force(site_url) #25
  force(team_id)
  force(expiration)
  return(
    function(request) {
      # Pass along query parameters from the request when we come back.
      site_url <- .update_site_url(site_url, request) #25

      # Exchange the code for a token.
      token <- slackteams::add_team_code( #32
        code = shiny::parseQueryString(request$QUERY_STRING)$code,
        redirect_uri = site_url,
        verbose = FALSE
      )

      # Encrypt the token.
      token <- .shinyslack_encrypt(token)

      # Have the browser set the cookie then reload.
      return(
        shiny::tagList(
          scenes::set_cookie( #5
            contents = token,
            cookie_name = .slack_token_cookie_name(team_id),
            expiration = expiration
          ),
          # Reload the page to re-process the request.
          shiny::tags$script(
            shiny::HTML(
              sprintf("location.replace('%s');", site_url)
            )
          )
        )
      )
    }
  )
}
```

::: aside
[#5](https://github.com/r4ds/shinyslack/issues/5){target="_blank"} [#25](https://github.com/r4ds/shinyslack/issues/25){target="_blank"} [#32](https://github.com/r4ds/shinyslack/issues/32){target="_blank"}
:::

## Q&A

-   Any questions that we didn't hit on the way?
-   Ping me on Slack if you'd like to help!
